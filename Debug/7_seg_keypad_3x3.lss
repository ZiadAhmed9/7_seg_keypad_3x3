
7_seg_keypad_3x3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d9a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001188  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000009cf  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 95 06 	call	0xd2a	; 0xd2a <main>
  64:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_setPINDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_setPINDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	82 34       	cpi	r24, 0x42	; 66
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <DIO_setPINDir+0x2a>
  94:	44 c0       	rjmp	.+136    	; 0x11e <DIO_setPINDir+0xb2>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	23 34       	cpi	r18, 0x43	; 67
  9c:	31 05       	cpc	r19, r1
  9e:	34 f4       	brge	.+12     	; 0xac <DIO_setPINDir+0x40>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	81 34       	cpi	r24, 0x41	; 65
  a6:	91 05       	cpc	r25, r1
  a8:	71 f0       	breq	.+28     	; 0xc6 <DIO_setPINDir+0x5a>
  aa:	bc c0       	rjmp	.+376    	; 0x224 <DIO_setPINDir+0x1b8>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	23 34       	cpi	r18, 0x43	; 67
  b2:	31 05       	cpc	r19, r1
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_setPINDir+0x4c>
  b6:	5f c0       	rjmp	.+190    	; 0x176 <DIO_setPINDir+0x10a>
  b8:	8c 81       	ldd	r24, Y+4	; 0x04
  ba:	9d 81       	ldd	r25, Y+5	; 0x05
  bc:	84 34       	cpi	r24, 0x44	; 68
  be:	91 05       	cpc	r25, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_setPINDir+0x58>
  c2:	85 c0       	rjmp	.+266    	; 0x1ce <DIO_setPINDir+0x162>
  c4:	af c0       	rjmp	.+350    	; 0x224 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	a1 f4       	brne	.+40     	; 0xf4 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_setPINDir+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_setPINDir+0x7a>
  ee:	84 2b       	or	r24, r20
  f0:	8c 93       	st	X, r24
  f2:	98 c0       	rjmp	.+304    	; 0x224 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
  f4:	aa e3       	ldi	r26, 0x3A	; 58
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	ea e3       	ldi	r30, 0x3A	; 58
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	48 2f       	mov	r20, r24
 100:	8a 81       	ldd	r24, Y+2	; 0x02
 102:	28 2f       	mov	r18, r24
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 2e       	mov	r0, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_setPINDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_setPINDir+0xa2>
 116:	80 95       	com	r24
 118:	84 23       	and	r24, r20
 11a:	8c 93       	st	X, r24
 11c:	83 c0       	rjmp	.+262    	; 0x224 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	a1 f4       	brne	.+40     	; 0x14c <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
 124:	a7 e3       	ldi	r26, 0x37	; 55
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e7 e3       	ldi	r30, 0x37	; 55
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_setPINDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_setPINDir+0xd2>
 146:	84 2b       	or	r24, r20
 148:	8c 93       	st	X, r24
 14a:	6c c0       	rjmp	.+216    	; 0x224 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
 14c:	a7 e3       	ldi	r26, 0x37	; 55
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e7 e3       	ldi	r30, 0x37	; 55
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8a 81       	ldd	r24, Y+2	; 0x02
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_setPINDir+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_setPINDir+0xfa>
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	8c 93       	st	X, r24
 174:	57 c0       	rjmp	.+174    	; 0x224 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	a1 f4       	brne	.+40     	; 0x1a4 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
 17c:	a4 e3       	ldi	r26, 0x34	; 52
 17e:	b0 e0       	ldi	r27, 0x00	; 0
 180:	e4 e3       	ldi	r30, 0x34	; 52
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	48 2f       	mov	r20, r24
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	28 2f       	mov	r18, r24
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPINDir+0x12e>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPINDir+0x12a>
 19e:	84 2b       	or	r24, r20
 1a0:	8c 93       	st	X, r24
 1a2:	40 c0       	rjmp	.+128    	; 0x224 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
 1a4:	a4 e3       	ldi	r26, 0x34	; 52
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	e4 e3       	ldi	r30, 0x34	; 52
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_setPINDir+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_setPINDir+0x152>
 1c6:	80 95       	com	r24
 1c8:	84 23       	and	r24, r20
 1ca:	8c 93       	st	X, r24
 1cc:	2b c0       	rjmp	.+86     	; 0x224 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	a1 f4       	brne	.+40     	; 0x1fc <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
 1d4:	a1 e3       	ldi	r26, 0x31	; 49
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e1 e3       	ldi	r30, 0x31	; 49
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_setPINDir+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_setPINDir+0x182>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	14 c0       	rjmp	.+40     	; 0x224 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
 1fc:	a1 e3       	ldi	r26, 0x31	; 49
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e1 e3       	ldi	r30, 0x31	; 49
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_setPINDir+0x1ae>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_setPINDir+0x1aa>
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_write_PIN+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <DIO_write_PIN+0x8>
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	6a 83       	std	Y+2, r22	; 0x02
 246:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	3d 83       	std	Y+5, r19	; 0x05
 250:	2c 83       	std	Y+4, r18	; 0x04
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	9d 81       	ldd	r25, Y+5	; 0x05
 256:	82 34       	cpi	r24, 0x42	; 66
 258:	91 05       	cpc	r25, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <DIO_write_PIN+0x2a>
 25c:	44 c0       	rjmp	.+136    	; 0x2e6 <DIO_write_PIN+0xb2>
 25e:	2c 81       	ldd	r18, Y+4	; 0x04
 260:	3d 81       	ldd	r19, Y+5	; 0x05
 262:	23 34       	cpi	r18, 0x43	; 67
 264:	31 05       	cpc	r19, r1
 266:	34 f4       	brge	.+12     	; 0x274 <DIO_write_PIN+0x40>
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	9d 81       	ldd	r25, Y+5	; 0x05
 26c:	81 34       	cpi	r24, 0x41	; 65
 26e:	91 05       	cpc	r25, r1
 270:	71 f0       	breq	.+28     	; 0x28e <DIO_write_PIN+0x5a>
 272:	bc c0       	rjmp	.+376    	; 0x3ec <DIO_write_PIN+0x1b8>
 274:	2c 81       	ldd	r18, Y+4	; 0x04
 276:	3d 81       	ldd	r19, Y+5	; 0x05
 278:	23 34       	cpi	r18, 0x43	; 67
 27a:	31 05       	cpc	r19, r1
 27c:	09 f4       	brne	.+2      	; 0x280 <DIO_write_PIN+0x4c>
 27e:	5f c0       	rjmp	.+190    	; 0x33e <DIO_write_PIN+0x10a>
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	9d 81       	ldd	r25, Y+5	; 0x05
 284:	84 34       	cpi	r24, 0x44	; 68
 286:	91 05       	cpc	r25, r1
 288:	09 f4       	brne	.+2      	; 0x28c <DIO_write_PIN+0x58>
 28a:	85 c0       	rjmp	.+266    	; 0x396 <DIO_write_PIN+0x162>
 28c:	af c0       	rjmp	.+350    	; 0x3ec <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	a1 f4       	brne	.+40     	; 0x2bc <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
 294:	ab e3       	ldi	r26, 0x3B	; 59
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	eb e3       	ldi	r30, 0x3B	; 59
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	48 2f       	mov	r20, r24
 2a0:	8a 81       	ldd	r24, Y+2	; 0x02
 2a2:	28 2f       	mov	r18, r24
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 2e       	mov	r0, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_write_PIN+0x7e>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	0a 94       	dec	r0
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_write_PIN+0x7a>
 2b6:	84 2b       	or	r24, r20
 2b8:	8c 93       	st	X, r24
 2ba:	98 c0       	rjmp	.+304    	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
 2bc:	ab e3       	ldi	r26, 0x3B	; 59
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	eb e3       	ldi	r30, 0x3B	; 59
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write_PIN+0xa6>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write_PIN+0xa2>
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	8c 93       	st	X, r24
 2e4:	83 c0       	rjmp	.+262    	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	a1 f4       	brne	.+40     	; 0x314 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
 2ec:	a8 e3       	ldi	r26, 0x38	; 56
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e8 e3       	ldi	r30, 0x38	; 56
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_write_PIN+0xd6>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_write_PIN+0xd2>
 30e:	84 2b       	or	r24, r20
 310:	8c 93       	st	X, r24
 312:	6c c0       	rjmp	.+216    	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
 314:	a8 e3       	ldi	r26, 0x38	; 56
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e8 e3       	ldi	r30, 0x38	; 56
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_write_PIN+0xfe>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_write_PIN+0xfa>
 336:	80 95       	com	r24
 338:	84 23       	and	r24, r20
 33a:	8c 93       	st	X, r24
 33c:	57 c0       	rjmp	.+174    	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	a1 f4       	brne	.+40     	; 0x36c <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
 344:	a5 e3       	ldi	r26, 0x35	; 53
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e5 e3       	ldi	r30, 0x35	; 53
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_write_PIN+0x12e>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_write_PIN+0x12a>
 366:	84 2b       	or	r24, r20
 368:	8c 93       	st	X, r24
 36a:	40 c0       	rjmp	.+128    	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
 36c:	a5 e3       	ldi	r26, 0x35	; 53
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e5 e3       	ldi	r30, 0x35	; 53
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_write_PIN+0x156>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_write_PIN+0x152>
 38e:	80 95       	com	r24
 390:	84 23       	and	r24, r20
 392:	8c 93       	st	X, r24
 394:	2b c0       	rjmp	.+86     	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	a1 f4       	brne	.+40     	; 0x3c4 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
 39c:	a2 e3       	ldi	r26, 0x32	; 50
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	e2 e3       	ldi	r30, 0x32	; 50
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_write_PIN+0x186>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_write_PIN+0x182>
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	14 c0       	rjmp	.+40     	; 0x3ec <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
 3c4:	a2 e3       	ldi	r26, 0x32	; 50
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e2 e3       	ldi	r30, 0x32	; 50
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_write_PIN+0x1ae>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_write_PIN+0x1aa>
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <DIO_read_PIN+0x6>
 402:	00 d0       	rcall	.+0      	; 0x404 <DIO_read_PIN+0x8>
 404:	0f 92       	push	r0
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
 40e:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	3d 83       	std	Y+5, r19	; 0x05
 418:	2c 83       	std	Y+4, r18	; 0x04
 41a:	8c 81       	ldd	r24, Y+4	; 0x04
 41c:	9d 81       	ldd	r25, Y+5	; 0x05
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	91 05       	cpc	r25, r1
 422:	41 f1       	breq	.+80     	; 0x474 <__stack+0x15>
 424:	2c 81       	ldd	r18, Y+4	; 0x04
 426:	3d 81       	ldd	r19, Y+5	; 0x05
 428:	23 34       	cpi	r18, 0x43	; 67
 42a:	31 05       	cpc	r19, r1
 42c:	34 f4       	brge	.+12     	; 0x43a <DIO_read_PIN+0x3e>
 42e:	8c 81       	ldd	r24, Y+4	; 0x04
 430:	9d 81       	ldd	r25, Y+5	; 0x05
 432:	81 34       	cpi	r24, 0x41	; 65
 434:	91 05       	cpc	r25, r1
 436:	61 f0       	breq	.+24     	; 0x450 <DIO_read_PIN+0x54>
 438:	52 c0       	rjmp	.+164    	; 0x4de <__stack+0x7f>
 43a:	2c 81       	ldd	r18, Y+4	; 0x04
 43c:	3d 81       	ldd	r19, Y+5	; 0x05
 43e:	23 34       	cpi	r18, 0x43	; 67
 440:	31 05       	cpc	r19, r1
 442:	51 f1       	breq	.+84     	; 0x498 <__stack+0x39>
 444:	8c 81       	ldd	r24, Y+4	; 0x04
 446:	9d 81       	ldd	r25, Y+5	; 0x05
 448:	84 34       	cpi	r24, 0x44	; 68
 44a:	91 05       	cpc	r25, r1
 44c:	b9 f1       	breq	.+110    	; 0x4bc <__stack+0x5d>
 44e:	47 c0       	rjmp	.+142    	; 0x4de <__stack+0x7f>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
 450:	e9 e3       	ldi	r30, 0x39	; 57
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	48 2f       	mov	r20, r24
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	28 2f       	mov	r18, r24
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 2e       	mov	r0, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	0a 94       	dec	r0
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__stack+0x7>
 46e:	84 23       	and	r24, r20
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	35 c0       	rjmp	.+106    	; 0x4de <__stack+0x7f>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
 474:	e6 e3       	ldi	r30, 0x36	; 54
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <__stack+0x2f>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <__stack+0x2b>
 492:	84 23       	and	r24, r20
 494:	89 83       	std	Y+1, r24	; 0x01
 496:	23 c0       	rjmp	.+70     	; 0x4de <__stack+0x7f>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
 498:	e3 e3       	ldi	r30, 0x33	; 51
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	48 2f       	mov	r20, r24
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 2e       	mov	r0, r18
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__stack+0x4f>
 4b6:	84 23       	and	r24, r20
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	11 c0       	rjmp	.+34     	; 0x4de <__stack+0x7f>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
 4bc:	e0 e3       	ldi	r30, 0x30	; 48
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 2e       	mov	r0, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__stack+0x77>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__stack+0x73>
 4da:	84 23       	and	r24, r20
 4dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
 4de:	89 81       	ldd	r24, Y+1	; 0x01
}
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	cf 91       	pop	r28
 4ec:	df 91       	pop	r29
 4ee:	08 95       	ret

000004f0 <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
 4f0:	df 93       	push	r29
 4f2:	cf 93       	push	r28
 4f4:	00 d0       	rcall	.+0      	; 0x4f6 <DIO_BIT_TOGGLE+0x6>
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <DIO_BIT_TOGGLE+0x8>
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	3c 83       	std	Y+4, r19	; 0x04
 508:	2b 83       	std	Y+3, r18	; 0x03
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	9c 81       	ldd	r25, Y+4	; 0x04
 50e:	82 34       	cpi	r24, 0x42	; 66
 510:	91 05       	cpc	r25, r1
 512:	51 f1       	breq	.+84     	; 0x568 <DIO_BIT_TOGGLE+0x78>
 514:	2b 81       	ldd	r18, Y+3	; 0x03
 516:	3c 81       	ldd	r19, Y+4	; 0x04
 518:	23 34       	cpi	r18, 0x43	; 67
 51a:	31 05       	cpc	r19, r1
 51c:	34 f4       	brge	.+12     	; 0x52a <DIO_BIT_TOGGLE+0x3a>
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	9c 81       	ldd	r25, Y+4	; 0x04
 522:	81 34       	cpi	r24, 0x41	; 65
 524:	91 05       	cpc	r25, r1
 526:	61 f0       	breq	.+24     	; 0x540 <DIO_BIT_TOGGLE+0x50>
 528:	5a c0       	rjmp	.+180    	; 0x5de <DIO_BIT_TOGGLE+0xee>
 52a:	2b 81       	ldd	r18, Y+3	; 0x03
 52c:	3c 81       	ldd	r19, Y+4	; 0x04
 52e:	23 34       	cpi	r18, 0x43	; 67
 530:	31 05       	cpc	r19, r1
 532:	71 f1       	breq	.+92     	; 0x590 <DIO_BIT_TOGGLE+0xa0>
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	9c 81       	ldd	r25, Y+4	; 0x04
 538:	84 34       	cpi	r24, 0x44	; 68
 53a:	91 05       	cpc	r25, r1
 53c:	e9 f1       	breq	.+122    	; 0x5b8 <DIO_BIT_TOGGLE+0xc8>
 53e:	4f c0       	rjmp	.+158    	; 0x5de <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
 540:	ab e3       	ldi	r26, 0x3B	; 59
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	eb e3       	ldi	r30, 0x3B	; 59
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	48 2f       	mov	r20, r24
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 2e       	mov	r0, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_BIT_TOGGLE+0x6e>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_BIT_TOGGLE+0x6a>
 562:	84 27       	eor	r24, r20
 564:	8c 93       	st	X, r24
 566:	3b c0       	rjmp	.+118    	; 0x5de <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
 568:	a8 e3       	ldi	r26, 0x38	; 56
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	e8 e3       	ldi	r30, 0x38	; 56
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	48 2f       	mov	r20, r24
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 2e       	mov	r0, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_BIT_TOGGLE+0x96>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_BIT_TOGGLE+0x92>
 58a:	84 27       	eor	r24, r20
 58c:	8c 93       	st	X, r24
 58e:	27 c0       	rjmp	.+78     	; 0x5de <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
 590:	a5 e3       	ldi	r26, 0x35	; 53
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	e5 e3       	ldi	r30, 0x35	; 53
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	48 2f       	mov	r20, r24
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 2e       	mov	r0, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_BIT_TOGGLE+0xbe>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	0a 94       	dec	r0
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_BIT_TOGGLE+0xba>
 5b2:	84 27       	eor	r24, r20
 5b4:	8c 93       	st	X, r24
 5b6:	13 c0       	rjmp	.+38     	; 0x5de <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
 5b8:	a2 e3       	ldi	r26, 0x32	; 50
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 e3       	ldi	r30, 0x32	; 50
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	48 2f       	mov	r20, r24
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 2e       	mov	r0, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_BIT_TOGGLE+0xe6>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_BIT_TOGGLE+0xe2>
 5da:	84 27       	eor	r24, r20
 5dc:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	cf 91       	pop	r28
 5e8:	df 91       	pop	r29
 5ea:	08 95       	ret

000005ec <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
 5ec:	df 93       	push	r29
 5ee:	cf 93       	push	r28
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DIO_set_port_Dir+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DIO_set_port_Dir+0x8>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	89 83       	std	Y+1, r24	; 0x01
 5fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	3c 83       	std	Y+4, r19	; 0x04
 604:	2b 83       	std	Y+3, r18	; 0x03
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	9c 81       	ldd	r25, Y+4	; 0x04
 60a:	82 34       	cpi	r24, 0x42	; 66
 60c:	91 05       	cpc	r25, r1
 60e:	11 f1       	breq	.+68     	; 0x654 <DIO_set_port_Dir+0x68>
 610:	2b 81       	ldd	r18, Y+3	; 0x03
 612:	3c 81       	ldd	r19, Y+4	; 0x04
 614:	23 34       	cpi	r18, 0x43	; 67
 616:	31 05       	cpc	r19, r1
 618:	34 f4       	brge	.+12     	; 0x626 <DIO_set_port_Dir+0x3a>
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	9c 81       	ldd	r25, Y+4	; 0x04
 61e:	81 34       	cpi	r24, 0x41	; 65
 620:	91 05       	cpc	r25, r1
 622:	61 f0       	breq	.+24     	; 0x63c <DIO_set_port_Dir+0x50>
 624:	3a c0       	rjmp	.+116    	; 0x69a <DIO_set_port_Dir+0xae>
 626:	2b 81       	ldd	r18, Y+3	; 0x03
 628:	3c 81       	ldd	r19, Y+4	; 0x04
 62a:	23 34       	cpi	r18, 0x43	; 67
 62c:	31 05       	cpc	r19, r1
 62e:	f1 f0       	breq	.+60     	; 0x66c <DIO_set_port_Dir+0x80>
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	9c 81       	ldd	r25, Y+4	; 0x04
 634:	84 34       	cpi	r24, 0x44	; 68
 636:	91 05       	cpc	r25, r1
 638:	29 f1       	breq	.+74     	; 0x684 <DIO_set_port_Dir+0x98>
 63a:	2f c0       	rjmp	.+94     	; 0x69a <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	29 f4       	brne	.+10     	; 0x64c <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
 642:	ea e3       	ldi	r30, 0x3A	; 58
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	80 83       	st	Z, r24
 64a:	27 c0       	rjmp	.+78     	; 0x69a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
 64c:	ea e3       	ldi	r30, 0x3A	; 58
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	10 82       	st	Z, r1
 652:	23 c0       	rjmp	.+70     	; 0x69a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	29 f4       	brne	.+10     	; 0x664 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
 65a:	e7 e3       	ldi	r30, 0x37	; 55
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	80 83       	st	Z, r24
 662:	1b c0       	rjmp	.+54     	; 0x69a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
 664:	e7 e3       	ldi	r30, 0x37	; 55
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	10 82       	st	Z, r1
 66a:	17 c0       	rjmp	.+46     	; 0x69a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	81 30       	cpi	r24, 0x01	; 1
 670:	29 f4       	brne	.+10     	; 0x67c <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
 672:	e4 e3       	ldi	r30, 0x34	; 52
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	8f ef       	ldi	r24, 0xFF	; 255
 678:	80 83       	st	Z, r24
 67a:	0f c0       	rjmp	.+30     	; 0x69a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
 67c:	e4 e3       	ldi	r30, 0x34	; 52
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	10 82       	st	Z, r1
 682:	0b c0       	rjmp	.+22     	; 0x69a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	29 f4       	brne	.+10     	; 0x694 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
 68a:	e1 e3       	ldi	r30, 0x31	; 49
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	80 83       	st	Z, r24
 692:	03 c0       	rjmp	.+6      	; 0x69a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
 694:	e1 e3       	ldi	r30, 0x31	; 49
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	08 95       	ret

000006a8 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
 6a8:	df 93       	push	r29
 6aa:	cf 93       	push	r28
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <DIO_write_port+0x6>
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <DIO_write_port+0x8>
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	3c 83       	std	Y+4, r19	; 0x04
 6c0:	2b 83       	std	Y+3, r18	; 0x03
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	9c 81       	ldd	r25, Y+4	; 0x04
 6c6:	82 34       	cpi	r24, 0x42	; 66
 6c8:	91 05       	cpc	r25, r1
 6ca:	d9 f0       	breq	.+54     	; 0x702 <DIO_write_port+0x5a>
 6cc:	2b 81       	ldd	r18, Y+3	; 0x03
 6ce:	3c 81       	ldd	r19, Y+4	; 0x04
 6d0:	23 34       	cpi	r18, 0x43	; 67
 6d2:	31 05       	cpc	r19, r1
 6d4:	34 f4       	brge	.+12     	; 0x6e2 <DIO_write_port+0x3a>
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	9c 81       	ldd	r25, Y+4	; 0x04
 6da:	81 34       	cpi	r24, 0x41	; 65
 6dc:	91 05       	cpc	r25, r1
 6de:	61 f0       	breq	.+24     	; 0x6f8 <DIO_write_port+0x50>
 6e0:	1e c0       	rjmp	.+60     	; 0x71e <DIO_write_port+0x76>
 6e2:	2b 81       	ldd	r18, Y+3	; 0x03
 6e4:	3c 81       	ldd	r19, Y+4	; 0x04
 6e6:	23 34       	cpi	r18, 0x43	; 67
 6e8:	31 05       	cpc	r19, r1
 6ea:	81 f0       	breq	.+32     	; 0x70c <DIO_write_port+0x64>
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	9c 81       	ldd	r25, Y+4	; 0x04
 6f0:	84 34       	cpi	r24, 0x44	; 68
 6f2:	91 05       	cpc	r25, r1
 6f4:	81 f0       	breq	.+32     	; 0x716 <DIO_write_port+0x6e>
 6f6:	13 c0       	rjmp	.+38     	; 0x71e <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
 6f8:	eb e3       	ldi	r30, 0x3B	; 59
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	80 83       	st	Z, r24
 700:	0e c0       	rjmp	.+28     	; 0x71e <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
 702:	e8 e3       	ldi	r30, 0x38	; 56
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	80 83       	st	Z, r24
 70a:	09 c0       	rjmp	.+18     	; 0x71e <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
 70c:	e5 e3       	ldi	r30, 0x35	; 53
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	80 83       	st	Z, r24
 714:	04 c0       	rjmp	.+8      	; 0x71e <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
 716:	e2 e3       	ldi	r30, 0x32	; 50
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	80 83       	st	Z, r24
	}
}
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	cf 91       	pop	r28
 728:	df 91       	pop	r29
 72a:	08 95       	ret

0000072c <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
 72c:	df 93       	push	r29
 72e:	cf 93       	push	r28
 730:	00 d0       	rcall	.+0      	; 0x732 <DIO_read_port+0x6>
 732:	00 d0       	rcall	.+0      	; 0x734 <DIO_read_port+0x8>
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
 73a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	28 2f       	mov	r18, r24
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	3c 83       	std	Y+4, r19	; 0x04
 744:	2b 83       	std	Y+3, r18	; 0x03
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	9c 81       	ldd	r25, Y+4	; 0x04
 74a:	82 34       	cpi	r24, 0x42	; 66
 74c:	91 05       	cpc	r25, r1
 74e:	d9 f0       	breq	.+54     	; 0x786 <DIO_read_port+0x5a>
 750:	2b 81       	ldd	r18, Y+3	; 0x03
 752:	3c 81       	ldd	r19, Y+4	; 0x04
 754:	23 34       	cpi	r18, 0x43	; 67
 756:	31 05       	cpc	r19, r1
 758:	34 f4       	brge	.+12     	; 0x766 <DIO_read_port+0x3a>
 75a:	8b 81       	ldd	r24, Y+3	; 0x03
 75c:	9c 81       	ldd	r25, Y+4	; 0x04
 75e:	81 34       	cpi	r24, 0x41	; 65
 760:	91 05       	cpc	r25, r1
 762:	61 f0       	breq	.+24     	; 0x77c <DIO_read_port+0x50>
 764:	1e c0       	rjmp	.+60     	; 0x7a2 <DIO_read_port+0x76>
 766:	2b 81       	ldd	r18, Y+3	; 0x03
 768:	3c 81       	ldd	r19, Y+4	; 0x04
 76a:	23 34       	cpi	r18, 0x43	; 67
 76c:	31 05       	cpc	r19, r1
 76e:	81 f0       	breq	.+32     	; 0x790 <DIO_read_port+0x64>
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	9c 81       	ldd	r25, Y+4	; 0x04
 774:	84 34       	cpi	r24, 0x44	; 68
 776:	91 05       	cpc	r25, r1
 778:	81 f0       	breq	.+32     	; 0x79a <DIO_read_port+0x6e>
 77a:	13 c0       	rjmp	.+38     	; 0x7a2 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
 77c:	e9 e3       	ldi	r30, 0x39	; 57
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	0e c0       	rjmp	.+28     	; 0x7a2 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
 786:	e6 e3       	ldi	r30, 0x36	; 54
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	89 83       	std	Y+1, r24	; 0x01
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
 790:	e3 e3       	ldi	r30, 0x33	; 51
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
 79a:	e0 e3       	ldi	r30, 0x30	; 48
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	08 95       	ret

000007b2 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <DIO_enablePullup_pin+0x6>
 7b8:	00 d0       	rcall	.+0      	; 0x7ba <DIO_enablePullup_pin+0x8>
 7ba:	0f 92       	push	r0
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
 7c0:	89 83       	std	Y+1, r24	; 0x01
 7c2:	6a 83       	std	Y+2, r22	; 0x02
 7c4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
 7c6:	89 81       	ldd	r24, Y+1	; 0x01
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	3d 83       	std	Y+5, r19	; 0x05
 7ce:	2c 83       	std	Y+4, r18	; 0x04
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	9d 81       	ldd	r25, Y+5	; 0x05
 7d4:	82 34       	cpi	r24, 0x42	; 66
 7d6:	91 05       	cpc	r25, r1
 7d8:	09 f4       	brne	.+2      	; 0x7dc <DIO_enablePullup_pin+0x2a>
 7da:	44 c0       	rjmp	.+136    	; 0x864 <DIO_enablePullup_pin+0xb2>
 7dc:	2c 81       	ldd	r18, Y+4	; 0x04
 7de:	3d 81       	ldd	r19, Y+5	; 0x05
 7e0:	23 34       	cpi	r18, 0x43	; 67
 7e2:	31 05       	cpc	r19, r1
 7e4:	34 f4       	brge	.+12     	; 0x7f2 <DIO_enablePullup_pin+0x40>
 7e6:	8c 81       	ldd	r24, Y+4	; 0x04
 7e8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ea:	81 34       	cpi	r24, 0x41	; 65
 7ec:	91 05       	cpc	r25, r1
 7ee:	71 f0       	breq	.+28     	; 0x80c <DIO_enablePullup_pin+0x5a>
 7f0:	bc c0       	rjmp	.+376    	; 0x96a <DIO_enablePullup_pin+0x1b8>
 7f2:	2c 81       	ldd	r18, Y+4	; 0x04
 7f4:	3d 81       	ldd	r19, Y+5	; 0x05
 7f6:	23 34       	cpi	r18, 0x43	; 67
 7f8:	31 05       	cpc	r19, r1
 7fa:	09 f4       	brne	.+2      	; 0x7fe <DIO_enablePullup_pin+0x4c>
 7fc:	5f c0       	rjmp	.+190    	; 0x8bc <DIO_enablePullup_pin+0x10a>
 7fe:	8c 81       	ldd	r24, Y+4	; 0x04
 800:	9d 81       	ldd	r25, Y+5	; 0x05
 802:	84 34       	cpi	r24, 0x44	; 68
 804:	91 05       	cpc	r25, r1
 806:	09 f4       	brne	.+2      	; 0x80a <DIO_enablePullup_pin+0x58>
 808:	85 c0       	rjmp	.+266    	; 0x914 <DIO_enablePullup_pin+0x162>
 80a:	af c0       	rjmp	.+350    	; 0x96a <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	a1 f4       	brne	.+40     	; 0x83a <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
 812:	ab e3       	ldi	r26, 0x3B	; 59
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	eb e3       	ldi	r30, 0x3B	; 59
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	48 2f       	mov	r20, r24
 81e:	8a 81       	ldd	r24, Y+2	; 0x02
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	02 2e       	mov	r0, r18
 82a:	02 c0       	rjmp	.+4      	; 0x830 <DIO_enablePullup_pin+0x7e>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	0a 94       	dec	r0
 832:	e2 f7       	brpl	.-8      	; 0x82c <DIO_enablePullup_pin+0x7a>
 834:	84 2b       	or	r24, r20
 836:	8c 93       	st	X, r24
 838:	98 c0       	rjmp	.+304    	; 0x96a <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
 83a:	ab e3       	ldi	r26, 0x3B	; 59
 83c:	b0 e0       	ldi	r27, 0x00	; 0
 83e:	eb e3       	ldi	r30, 0x3B	; 59
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	80 81       	ld	r24, Z
 844:	48 2f       	mov	r20, r24
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	28 2f       	mov	r18, r24
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 2e       	mov	r0, r18
 852:	02 c0       	rjmp	.+4      	; 0x858 <DIO_enablePullup_pin+0xa6>
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	0a 94       	dec	r0
 85a:	e2 f7       	brpl	.-8      	; 0x854 <DIO_enablePullup_pin+0xa2>
 85c:	80 95       	com	r24
 85e:	84 23       	and	r24, r20
 860:	8c 93       	st	X, r24
 862:	83 c0       	rjmp	.+262    	; 0x96a <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
 864:	8b 81       	ldd	r24, Y+3	; 0x03
 866:	81 30       	cpi	r24, 0x01	; 1
 868:	a1 f4       	brne	.+40     	; 0x892 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
 86a:	a8 e3       	ldi	r26, 0x38	; 56
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	e8 e3       	ldi	r30, 0x38	; 56
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	48 2f       	mov	r20, r24
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 2e       	mov	r0, r18
 882:	02 c0       	rjmp	.+4      	; 0x888 <DIO_enablePullup_pin+0xd6>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	0a 94       	dec	r0
 88a:	e2 f7       	brpl	.-8      	; 0x884 <DIO_enablePullup_pin+0xd2>
 88c:	84 2b       	or	r24, r20
 88e:	8c 93       	st	X, r24
 890:	6c c0       	rjmp	.+216    	; 0x96a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
 892:	a8 e3       	ldi	r26, 0x38	; 56
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	e8 e3       	ldi	r30, 0x38	; 56
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	48 2f       	mov	r20, r24
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	28 2f       	mov	r18, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 2e       	mov	r0, r18
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <DIO_enablePullup_pin+0xfe>
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	0a 94       	dec	r0
 8b2:	e2 f7       	brpl	.-8      	; 0x8ac <DIO_enablePullup_pin+0xfa>
 8b4:	80 95       	com	r24
 8b6:	84 23       	and	r24, r20
 8b8:	8c 93       	st	X, r24
 8ba:	57 c0       	rjmp	.+174    	; 0x96a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
 8bc:	8b 81       	ldd	r24, Y+3	; 0x03
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	a1 f4       	brne	.+40     	; 0x8ea <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
 8c2:	a5 e3       	ldi	r26, 0x35	; 53
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e5 e3       	ldi	r30, 0x35	; 53
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	48 2f       	mov	r20, r24
 8ce:	8a 81       	ldd	r24, Y+2	; 0x02
 8d0:	28 2f       	mov	r18, r24
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	02 2e       	mov	r0, r18
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <DIO_enablePullup_pin+0x12e>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	0a 94       	dec	r0
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <DIO_enablePullup_pin+0x12a>
 8e4:	84 2b       	or	r24, r20
 8e6:	8c 93       	st	X, r24
 8e8:	40 c0       	rjmp	.+128    	; 0x96a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
 8ea:	a5 e3       	ldi	r26, 0x35	; 53
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	e5 e3       	ldi	r30, 0x35	; 53
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	48 2f       	mov	r20, r24
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	28 2f       	mov	r18, r24
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 2e       	mov	r0, r18
 902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_enablePullup_pin+0x156>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	0a 94       	dec	r0
 90a:	e2 f7       	brpl	.-8      	; 0x904 <DIO_enablePullup_pin+0x152>
 90c:	80 95       	com	r24
 90e:	84 23       	and	r24, r20
 910:	8c 93       	st	X, r24
 912:	2b c0       	rjmp	.+86     	; 0x96a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
 914:	8b 81       	ldd	r24, Y+3	; 0x03
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	a1 f4       	brne	.+40     	; 0x942 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
 91a:	a2 e3       	ldi	r26, 0x32	; 50
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	e2 e3       	ldi	r30, 0x32	; 50
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	48 2f       	mov	r20, r24
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	28 2f       	mov	r18, r24
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 2e       	mov	r0, r18
 932:	02 c0       	rjmp	.+4      	; 0x938 <DIO_enablePullup_pin+0x186>
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	0a 94       	dec	r0
 93a:	e2 f7       	brpl	.-8      	; 0x934 <DIO_enablePullup_pin+0x182>
 93c:	84 2b       	or	r24, r20
 93e:	8c 93       	st	X, r24
 940:	14 c0       	rjmp	.+40     	; 0x96a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
 942:	a2 e3       	ldi	r26, 0x32	; 50
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e2 e3       	ldi	r30, 0x32	; 50
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	48 2f       	mov	r20, r24
 94e:	8a 81       	ldd	r24, Y+2	; 0x02
 950:	28 2f       	mov	r18, r24
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	02 2e       	mov	r0, r18
 95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_enablePullup_pin+0x1ae>
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	0a 94       	dec	r0
 962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_enablePullup_pin+0x1aa>
 964:	80 95       	com	r24
 966:	84 23       	and	r24, r20
 968:	8c 93       	st	X, r24
				}
				break;
	}
}
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	0f 90       	pop	r0
 970:	0f 90       	pop	r0
 972:	0f 90       	pop	r0
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	08 95       	ret

0000097a <write_low_nibble>:

void write_low_nibble(uint8 portname,uint8 value)
{
 97a:	df 93       	push	r29
 97c:	cf 93       	push	r28
 97e:	00 d0       	rcall	.+0      	; 0x980 <write_low_nibble+0x6>
 980:	00 d0       	rcall	.+0      	; 0x982 <write_low_nibble+0x8>
 982:	cd b7       	in	r28, 0x3d	; 61
 984:	de b7       	in	r29, 0x3e	; 62
 986:	89 83       	std	Y+1, r24	; 0x01
 988:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	8f 70       	andi	r24, 0x0F	; 15
 98e:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	28 2f       	mov	r18, r24
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	3c 83       	std	Y+4, r19	; 0x04
 998:	2b 83       	std	Y+3, r18	; 0x03
 99a:	8b 81       	ldd	r24, Y+3	; 0x03
 99c:	9c 81       	ldd	r25, Y+4	; 0x04
 99e:	82 34       	cpi	r24, 0x42	; 66
 9a0:	91 05       	cpc	r25, r1
 9a2:	31 f1       	breq	.+76     	; 0x9f0 <write_low_nibble+0x76>
 9a4:	2b 81       	ldd	r18, Y+3	; 0x03
 9a6:	3c 81       	ldd	r19, Y+4	; 0x04
 9a8:	23 34       	cpi	r18, 0x43	; 67
 9aa:	31 05       	cpc	r19, r1
 9ac:	34 f4       	brge	.+12     	; 0x9ba <write_low_nibble+0x40>
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	9c 81       	ldd	r25, Y+4	; 0x04
 9b2:	81 34       	cpi	r24, 0x41	; 65
 9b4:	91 05       	cpc	r25, r1
 9b6:	61 f0       	breq	.+24     	; 0x9d0 <write_low_nibble+0x56>
 9b8:	4a c0       	rjmp	.+148    	; 0xa4e <write_low_nibble+0xd4>
 9ba:	2b 81       	ldd	r18, Y+3	; 0x03
 9bc:	3c 81       	ldd	r19, Y+4	; 0x04
 9be:	23 34       	cpi	r18, 0x43	; 67
 9c0:	31 05       	cpc	r19, r1
 9c2:	31 f1       	breq	.+76     	; 0xa10 <write_low_nibble+0x96>
 9c4:	8b 81       	ldd	r24, Y+3	; 0x03
 9c6:	9c 81       	ldd	r25, Y+4	; 0x04
 9c8:	84 34       	cpi	r24, 0x44	; 68
 9ca:	91 05       	cpc	r25, r1
 9cc:	89 f1       	breq	.+98     	; 0xa30 <write_low_nibble+0xb6>
 9ce:	3f c0       	rjmp	.+126    	; 0xa4e <write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
 9d0:	ab e3       	ldi	r26, 0x3B	; 59
 9d2:	b0 e0       	ldi	r27, 0x00	; 0
 9d4:	eb e3       	ldi	r30, 0x3B	; 59
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 81       	ld	r24, Z
 9da:	80 7f       	andi	r24, 0xF0	; 240
 9dc:	8c 93       	st	X, r24
		PORTA|=value;
 9de:	ab e3       	ldi	r26, 0x3B	; 59
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	eb e3       	ldi	r30, 0x3B	; 59
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	90 81       	ld	r25, Z
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	89 2b       	or	r24, r25
 9ec:	8c 93       	st	X, r24
 9ee:	2f c0       	rjmp	.+94     	; 0xa4e <write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
 9f0:	a8 e3       	ldi	r26, 0x38	; 56
 9f2:	b0 e0       	ldi	r27, 0x00	; 0
 9f4:	e8 e3       	ldi	r30, 0x38	; 56
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	80 81       	ld	r24, Z
 9fa:	80 7f       	andi	r24, 0xF0	; 240
 9fc:	8c 93       	st	X, r24
		PORTA|=value;
 9fe:	ab e3       	ldi	r26, 0x3B	; 59
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	eb e3       	ldi	r30, 0x3B	; 59
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	90 81       	ld	r25, Z
 a08:	8a 81       	ldd	r24, Y+2	; 0x02
 a0a:	89 2b       	or	r24, r25
 a0c:	8c 93       	st	X, r24
 a0e:	1f c0       	rjmp	.+62     	; 0xa4e <write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
 a10:	a5 e3       	ldi	r26, 0x35	; 53
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	e5 e3       	ldi	r30, 0x35	; 53
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	80 7f       	andi	r24, 0xF0	; 240
 a1c:	8c 93       	st	X, r24
		PORTA|=value;
 a1e:	ab e3       	ldi	r26, 0x3B	; 59
 a20:	b0 e0       	ldi	r27, 0x00	; 0
 a22:	eb e3       	ldi	r30, 0x3B	; 59
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	90 81       	ld	r25, Z
 a28:	8a 81       	ldd	r24, Y+2	; 0x02
 a2a:	89 2b       	or	r24, r25
 a2c:	8c 93       	st	X, r24
 a2e:	0f c0       	rjmp	.+30     	; 0xa4e <write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
 a30:	a2 e3       	ldi	r26, 0x32	; 50
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	e2 e3       	ldi	r30, 0x32	; 50
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	80 81       	ld	r24, Z
 a3a:	80 7f       	andi	r24, 0xF0	; 240
 a3c:	8c 93       	st	X, r24
		PORTD|=value;
 a3e:	a2 e3       	ldi	r26, 0x32	; 50
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	e2 e3       	ldi	r30, 0x32	; 50
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	90 81       	ld	r25, Z
 a48:	8a 81       	ldd	r24, Y+2	; 0x02
 a4a:	89 2b       	or	r24, r25
 a4c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
 a4e:	0f 90       	pop	r0
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	0f 90       	pop	r0
 a56:	cf 91       	pop	r28
 a58:	df 91       	pop	r29
 a5a:	08 95       	ret

00000a5c <write_high_nibble>:

void write_high_nibble(uint8 portname,uint8 value)
{
 a5c:	df 93       	push	r29
 a5e:	cf 93       	push	r28
 a60:	00 d0       	rcall	.+0      	; 0xa62 <write_high_nibble+0x6>
 a62:	00 d0       	rcall	.+0      	; 0xa64 <write_high_nibble+0x8>
 a64:	cd b7       	in	r28, 0x3d	; 61
 a66:	de b7       	in	r29, 0x3e	; 62
 a68:	89 83       	std	Y+1, r24	; 0x01
 a6a:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
 a6c:	8a 81       	ldd	r24, Y+2	; 0x02
 a6e:	82 95       	swap	r24
 a70:	80 7f       	andi	r24, 0xF0	; 240
 a72:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	28 2f       	mov	r18, r24
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	3c 83       	std	Y+4, r19	; 0x04
 a7c:	2b 83       	std	Y+3, r18	; 0x03
 a7e:	8b 81       	ldd	r24, Y+3	; 0x03
 a80:	9c 81       	ldd	r25, Y+4	; 0x04
 a82:	82 34       	cpi	r24, 0x42	; 66
 a84:	91 05       	cpc	r25, r1
 a86:	31 f1       	breq	.+76     	; 0xad4 <write_high_nibble+0x78>
 a88:	2b 81       	ldd	r18, Y+3	; 0x03
 a8a:	3c 81       	ldd	r19, Y+4	; 0x04
 a8c:	23 34       	cpi	r18, 0x43	; 67
 a8e:	31 05       	cpc	r19, r1
 a90:	34 f4       	brge	.+12     	; 0xa9e <write_high_nibble+0x42>
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	9c 81       	ldd	r25, Y+4	; 0x04
 a96:	81 34       	cpi	r24, 0x41	; 65
 a98:	91 05       	cpc	r25, r1
 a9a:	61 f0       	breq	.+24     	; 0xab4 <write_high_nibble+0x58>
 a9c:	4a c0       	rjmp	.+148    	; 0xb32 <write_high_nibble+0xd6>
 a9e:	2b 81       	ldd	r18, Y+3	; 0x03
 aa0:	3c 81       	ldd	r19, Y+4	; 0x04
 aa2:	23 34       	cpi	r18, 0x43	; 67
 aa4:	31 05       	cpc	r19, r1
 aa6:	31 f1       	breq	.+76     	; 0xaf4 <write_high_nibble+0x98>
 aa8:	8b 81       	ldd	r24, Y+3	; 0x03
 aaa:	9c 81       	ldd	r25, Y+4	; 0x04
 aac:	84 34       	cpi	r24, 0x44	; 68
 aae:	91 05       	cpc	r25, r1
 ab0:	89 f1       	breq	.+98     	; 0xb14 <write_high_nibble+0xb8>
 ab2:	3f c0       	rjmp	.+126    	; 0xb32 <write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
 ab4:	ab e3       	ldi	r26, 0x3B	; 59
 ab6:	b0 e0       	ldi	r27, 0x00	; 0
 ab8:	eb e3       	ldi	r30, 0x3B	; 59
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	80 81       	ld	r24, Z
 abe:	8f 70       	andi	r24, 0x0F	; 15
 ac0:	8c 93       	st	X, r24
		PORTA|=value;
 ac2:	ab e3       	ldi	r26, 0x3B	; 59
 ac4:	b0 e0       	ldi	r27, 0x00	; 0
 ac6:	eb e3       	ldi	r30, 0x3B	; 59
 ac8:	f0 e0       	ldi	r31, 0x00	; 0
 aca:	90 81       	ld	r25, Z
 acc:	8a 81       	ldd	r24, Y+2	; 0x02
 ace:	89 2b       	or	r24, r25
 ad0:	8c 93       	st	X, r24
 ad2:	2f c0       	rjmp	.+94     	; 0xb32 <write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
 ad4:	a8 e3       	ldi	r26, 0x38	; 56
 ad6:	b0 e0       	ldi	r27, 0x00	; 0
 ad8:	e8 e3       	ldi	r30, 0x38	; 56
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	80 81       	ld	r24, Z
 ade:	8f 70       	andi	r24, 0x0F	; 15
 ae0:	8c 93       	st	X, r24
		PORTA|=value;
 ae2:	ab e3       	ldi	r26, 0x3B	; 59
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	eb e3       	ldi	r30, 0x3B	; 59
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	90 81       	ld	r25, Z
 aec:	8a 81       	ldd	r24, Y+2	; 0x02
 aee:	89 2b       	or	r24, r25
 af0:	8c 93       	st	X, r24
 af2:	1f c0       	rjmp	.+62     	; 0xb32 <write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
 af4:	a5 e3       	ldi	r26, 0x35	; 53
 af6:	b0 e0       	ldi	r27, 0x00	; 0
 af8:	e5 e3       	ldi	r30, 0x35	; 53
 afa:	f0 e0       	ldi	r31, 0x00	; 0
 afc:	80 81       	ld	r24, Z
 afe:	8f 70       	andi	r24, 0x0F	; 15
 b00:	8c 93       	st	X, r24
		PORTA|=value;
 b02:	ab e3       	ldi	r26, 0x3B	; 59
 b04:	b0 e0       	ldi	r27, 0x00	; 0
 b06:	eb e3       	ldi	r30, 0x3B	; 59
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	90 81       	ld	r25, Z
 b0c:	8a 81       	ldd	r24, Y+2	; 0x02
 b0e:	89 2b       	or	r24, r25
 b10:	8c 93       	st	X, r24
 b12:	0f c0       	rjmp	.+30     	; 0xb32 <write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
 b14:	a2 e3       	ldi	r26, 0x32	; 50
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	e2 e3       	ldi	r30, 0x32	; 50
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 81       	ld	r24, Z
 b1e:	8f 70       	andi	r24, 0x0F	; 15
 b20:	8c 93       	st	X, r24
		PORTD|=value;
 b22:	a2 e3       	ldi	r26, 0x32	; 50
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	e2 e3       	ldi	r30, 0x32	; 50
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	90 81       	ld	r25, Z
 b2c:	8a 81       	ldd	r24, Y+2	; 0x02
 b2e:	89 2b       	or	r24, r25
 b30:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
 b32:	0f 90       	pop	r0
 b34:	0f 90       	pop	r0
 b36:	0f 90       	pop	r0
 b38:	0f 90       	pop	r0
 b3a:	cf 91       	pop	r28
 b3c:	df 91       	pop	r29
 b3e:	08 95       	ret

00000b40 <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
 b40:	df 93       	push	r29
 b42:	cf 93       	push	r28
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,4,in);
 b48:	82 e4       	ldi	r24, 0x42	; 66
 b4a:	64 e0       	ldi	r22, 0x04	; 4
 b4c:	40 e0       	ldi	r20, 0x00	; 0
 b4e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,5,in);
 b52:	82 e4       	ldi	r24, 0x42	; 66
 b54:	65 e0       	ldi	r22, 0x05	; 5
 b56:	40 e0       	ldi	r20, 0x00	; 0
 b58:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,6,in);
 b5c:	82 e4       	ldi	r24, 0x42	; 66
 b5e:	66 e0       	ldi	r22, 0x06	; 6
 b60:	40 e0       	ldi	r20, 0x00	; 0
 b62:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,7,in);
 b66:	82 e4       	ldi	r24, 0x42	; 66
 b68:	67 e0       	ldi	r22, 0x07	; 7
 b6a:	40 e0       	ldi	r20, 0x00	; 0
 b6c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
 b70:	84 e4       	ldi	r24, 0x44	; 68
 b72:	62 e0       	ldi	r22, 0x02	; 2
 b74:	40 e0       	ldi	r20, 0x00	; 0
 b76:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
 b7a:	84 e4       	ldi	r24, 0x44	; 68
 b7c:	63 e0       	ldi	r22, 0x03	; 3
 b7e:	40 e0       	ldi	r20, 0x00	; 0
 b80:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,4,in);
 b84:	84 e4       	ldi	r24, 0x44	; 68
 b86:	64 e0       	ldi	r22, 0x04	; 4
 b88:	40 e0       	ldi	r20, 0x00	; 0
 b8a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
 b8e:	84 e4       	ldi	r24, 0x44	; 68
 b90:	62 e0       	ldi	r22, 0x02	; 2
 b92:	41 e0       	ldi	r20, 0x01	; 1
 b94:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
 b98:	84 e4       	ldi	r24, 0x44	; 68
 b9a:	63 e0       	ldi	r22, 0x03	; 3
 b9c:	41 e0       	ldi	r20, 0x01	; 1
 b9e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,4,1);
 ba2:	84 e4       	ldi	r24, 0x44	; 68
 ba4:	64 e0       	ldi	r22, 0x04	; 4
 ba6:	41 e0       	ldi	r20, 0x01	; 1
 ba8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DIO_enablePullup_pin>
}
 bac:	cf 91       	pop	r28
 bae:	df 91       	pop	r29
 bb0:	08 95       	ret

00000bb2 <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
 bb2:	df 93       	push	r29
 bb4:	cf 93       	push	r28
 bb6:	00 d0       	rcall	.+0      	; 0xbb8 <KeyPad_getPressedKey+0x6>
 bb8:	cd b7       	in	r28, 0x3d	; 61
 bba:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
 bbc:	0e 94 a0 05 	call	0xb40	; 0xb40 <KeyPad_init>
		for(row=0;row<N_col;row++)
 bc0:	19 82       	std	Y+1, r1	; 0x01
 bc2:	42 c0       	rjmp	.+132    	; 0xc48 <KeyPad_getPressedKey+0x96>
		{
			if(row>0)
 bc4:	89 81       	ldd	r24, Y+1	; 0x01
 bc6:	88 23       	and	r24, r24
 bc8:	41 f0       	breq	.+16     	; 0xbda <KeyPad_getPressedKey+0x28>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row+3,in);
 bca:	89 81       	ldd	r24, Y+1	; 0x01
 bcc:	98 2f       	mov	r25, r24
 bce:	9d 5f       	subi	r25, 0xFD	; 253
 bd0:	82 e4       	ldi	r24, 0x42	; 66
 bd2:	69 2f       	mov	r22, r25
 bd4:	40 e0       	ldi	r20, 0x00	; 0
 bd6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row+4,out);
 bda:	89 81       	ldd	r24, Y+1	; 0x01
 bdc:	98 2f       	mov	r25, r24
 bde:	9c 5f       	subi	r25, 0xFC	; 252
 be0:	82 e4       	ldi	r24, 0x42	; 66
 be2:	69 2f       	mov	r22, r25
 be4:	41 e0       	ldi	r20, 0x01	; 1
 be6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row+4,0);
 bea:	89 81       	ldd	r24, Y+1	; 0x01
 bec:	98 2f       	mov	r25, r24
 bee:	9c 5f       	subi	r25, 0xFC	; 252
 bf0:	82 e4       	ldi	r24, 0x42	; 66
 bf2:	69 2f       	mov	r22, r25
 bf4:	40 e0       	ldi	r20, 0x00	; 0
 bf6:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
 bfa:	1a 82       	std	Y+2, r1	; 0x02
 bfc:	1f c0       	rjmp	.+62     	; 0xc3c <KeyPad_getPressedKey+0x8a>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col+2)==0)
 bfe:	8a 81       	ldd	r24, Y+2	; 0x02
 c00:	98 2f       	mov	r25, r24
 c02:	9e 5f       	subi	r25, 0xFE	; 254
 c04:	84 e4       	ldi	r24, 0x44	; 68
 c06:	69 2f       	mov	r22, r25
 c08:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_read_PIN>
 c0c:	88 23       	and	r24, r24
 c0e:	99 f4       	brne	.+38     	; 0xc36 <KeyPad_getPressedKey+0x84>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
 c10:	89 81       	ldd	r24, Y+1	; 0x01
 c12:	28 2f       	mov	r18, r24
 c14:	30 e0       	ldi	r19, 0x00	; 0
 c16:	c9 01       	movw	r24, r18
 c18:	88 0f       	add	r24, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	82 0f       	add	r24, r18
 c1e:	93 1f       	adc	r25, r19
 c20:	98 2f       	mov	r25, r24
 c22:	8a 81       	ldd	r24, Y+2	; 0x02
 c24:	89 0f       	add	r24, r25
 c26:	8f 5f       	subi	r24, 0xFF	; 255
 c28:	0e 94 29 06 	call	0xc52	; 0xc52 <KeyPad_4x3_adjustKeyNumber>
				}
			}
		}
	}

}
 c2c:	0f 90       	pop	r0
 c2e:	0f 90       	pop	r0
 c30:	cf 91       	pop	r28
 c32:	df 91       	pop	r29
 c34:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row+3,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row+4,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row+4,0);
			for(col=0;col<N_col;col++)
 c36:	8a 81       	ldd	r24, Y+2	; 0x02
 c38:	8f 5f       	subi	r24, 0xFF	; 255
 c3a:	8a 83       	std	Y+2, r24	; 0x02
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	83 30       	cpi	r24, 0x03	; 3
 c40:	f0 f2       	brcs	.-68     	; 0xbfe <KeyPad_getPressedKey+0x4c>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_col;row++)
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	8f 5f       	subi	r24, 0xFF	; 255
 c46:	89 83       	std	Y+1, r24	; 0x01
 c48:	89 81       	ldd	r24, Y+1	; 0x01
 c4a:	83 30       	cpi	r24, 0x03	; 3
 c4c:	08 f4       	brcc	.+2      	; 0xc50 <KeyPad_getPressedKey+0x9e>
 c4e:	ba cf       	rjmp	.-140    	; 0xbc4 <KeyPad_getPressedKey+0x12>
 c50:	b5 cf       	rjmp	.-150    	; 0xbbc <KeyPad_getPressedKey+0xa>

00000c52 <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
 c52:	df 93       	push	r29
 c54:	cf 93       	push	r28
 c56:	00 d0       	rcall	.+0      	; 0xc58 <KeyPad_4x3_adjustKeyNumber+0x6>
 c58:	00 d0       	rcall	.+0      	; 0xc5a <KeyPad_4x3_adjustKeyNumber+0x8>
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
 c5e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
 c60:	89 81       	ldd	r24, Y+1	; 0x01
 c62:	28 2f       	mov	r18, r24
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	3c 83       	std	Y+4, r19	; 0x04
 c68:	2b 83       	std	Y+3, r18	; 0x03
 c6a:	8b 81       	ldd	r24, Y+3	; 0x03
 c6c:	9c 81       	ldd	r25, Y+4	; 0x04
 c6e:	85 30       	cpi	r24, 0x05	; 5
 c70:	91 05       	cpc	r25, r1
 c72:	09 f4       	brne	.+2      	; 0xc76 <KeyPad_4x3_adjustKeyNumber+0x24>
 c74:	41 c0       	rjmp	.+130    	; 0xcf8 <KeyPad_4x3_adjustKeyNumber+0xa6>
 c76:	2b 81       	ldd	r18, Y+3	; 0x03
 c78:	3c 81       	ldd	r19, Y+4	; 0x04
 c7a:	26 30       	cpi	r18, 0x06	; 6
 c7c:	31 05       	cpc	r19, r1
 c7e:	dc f4       	brge	.+54     	; 0xcb6 <KeyPad_4x3_adjustKeyNumber+0x64>
 c80:	8b 81       	ldd	r24, Y+3	; 0x03
 c82:	9c 81       	ldd	r25, Y+4	; 0x04
 c84:	82 30       	cpi	r24, 0x02	; 2
 c86:	91 05       	cpc	r25, r1
 c88:	71 f1       	breq	.+92     	; 0xce6 <KeyPad_4x3_adjustKeyNumber+0x94>
 c8a:	2b 81       	ldd	r18, Y+3	; 0x03
 c8c:	3c 81       	ldd	r19, Y+4	; 0x04
 c8e:	23 30       	cpi	r18, 0x03	; 3
 c90:	31 05       	cpc	r19, r1
 c92:	34 f4       	brge	.+12     	; 0xca0 <KeyPad_4x3_adjustKeyNumber+0x4e>
 c94:	8b 81       	ldd	r24, Y+3	; 0x03
 c96:	9c 81       	ldd	r25, Y+4	; 0x04
 c98:	81 30       	cpi	r24, 0x01	; 1
 c9a:	91 05       	cpc	r25, r1
 c9c:	09 f1       	breq	.+66     	; 0xce0 <KeyPad_4x3_adjustKeyNumber+0x8e>
 c9e:	3b c0       	rjmp	.+118    	; 0xd16 <KeyPad_4x3_adjustKeyNumber+0xc4>
 ca0:	2b 81       	ldd	r18, Y+3	; 0x03
 ca2:	3c 81       	ldd	r19, Y+4	; 0x04
 ca4:	23 30       	cpi	r18, 0x03	; 3
 ca6:	31 05       	cpc	r19, r1
 ca8:	09 f1       	breq	.+66     	; 0xcec <KeyPad_4x3_adjustKeyNumber+0x9a>
 caa:	8b 81       	ldd	r24, Y+3	; 0x03
 cac:	9c 81       	ldd	r25, Y+4	; 0x04
 cae:	84 30       	cpi	r24, 0x04	; 4
 cb0:	91 05       	cpc	r25, r1
 cb2:	f9 f0       	breq	.+62     	; 0xcf2 <KeyPad_4x3_adjustKeyNumber+0xa0>
 cb4:	30 c0       	rjmp	.+96     	; 0xd16 <KeyPad_4x3_adjustKeyNumber+0xc4>
 cb6:	2b 81       	ldd	r18, Y+3	; 0x03
 cb8:	3c 81       	ldd	r19, Y+4	; 0x04
 cba:	27 30       	cpi	r18, 0x07	; 7
 cbc:	31 05       	cpc	r19, r1
 cbe:	11 f1       	breq	.+68     	; 0xd04 <KeyPad_4x3_adjustKeyNumber+0xb2>
 cc0:	8b 81       	ldd	r24, Y+3	; 0x03
 cc2:	9c 81       	ldd	r25, Y+4	; 0x04
 cc4:	87 30       	cpi	r24, 0x07	; 7
 cc6:	91 05       	cpc	r25, r1
 cc8:	d4 f0       	brlt	.+52     	; 0xcfe <KeyPad_4x3_adjustKeyNumber+0xac>
 cca:	2b 81       	ldd	r18, Y+3	; 0x03
 ccc:	3c 81       	ldd	r19, Y+4	; 0x04
 cce:	28 30       	cpi	r18, 0x08	; 8
 cd0:	31 05       	cpc	r19, r1
 cd2:	d9 f0       	breq	.+54     	; 0xd0a <KeyPad_4x3_adjustKeyNumber+0xb8>
 cd4:	8b 81       	ldd	r24, Y+3	; 0x03
 cd6:	9c 81       	ldd	r25, Y+4	; 0x04
 cd8:	89 30       	cpi	r24, 0x09	; 9
 cda:	91 05       	cpc	r25, r1
 cdc:	c9 f0       	breq	.+50     	; 0xd10 <KeyPad_4x3_adjustKeyNumber+0xbe>
 cde:	1b c0       	rjmp	.+54     	; 0xd16 <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
 ce0:	91 e3       	ldi	r25, 0x31	; 49
 ce2:	9a 83       	std	Y+2, r25	; 0x02
 ce4:	1a c0       	rjmp	.+52     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
 ce6:	22 e3       	ldi	r18, 0x32	; 50
 ce8:	2a 83       	std	Y+2, r18	; 0x02
 cea:	17 c0       	rjmp	.+46     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
 cec:	33 e3       	ldi	r19, 0x33	; 51
 cee:	3a 83       	std	Y+2, r19	; 0x02
 cf0:	14 c0       	rjmp	.+40     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
 cf2:	84 e3       	ldi	r24, 0x34	; 52
 cf4:	8a 83       	std	Y+2, r24	; 0x02
 cf6:	11 c0       	rjmp	.+34     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
 cf8:	95 e3       	ldi	r25, 0x35	; 53
 cfa:	9a 83       	std	Y+2, r25	; 0x02
 cfc:	0e c0       	rjmp	.+28     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
 cfe:	26 e3       	ldi	r18, 0x36	; 54
 d00:	2a 83       	std	Y+2, r18	; 0x02
 d02:	0b c0       	rjmp	.+22     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
 d04:	37 e3       	ldi	r19, 0x37	; 55
 d06:	3a 83       	std	Y+2, r19	; 0x02
 d08:	08 c0       	rjmp	.+16     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
 d0a:	88 e3       	ldi	r24, 0x38	; 56
 d0c:	8a 83       	std	Y+2, r24	; 0x02
 d0e:	05 c0       	rjmp	.+10     	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
 d10:	99 e3       	ldi	r25, 0x39	; 57
 d12:	9a 83       	std	Y+2, r25	; 0x02
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
 d16:	20 e3       	ldi	r18, 0x30	; 48
 d18:	2a 83       	std	Y+2, r18	; 0x02
 d1a:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
 d1c:	0f 90       	pop	r0
 d1e:	0f 90       	pop	r0
 d20:	0f 90       	pop	r0
 d22:	0f 90       	pop	r0
 d24:	cf 91       	pop	r28
 d26:	df 91       	pop	r29
 d28:	08 95       	ret

00000d2a <main>:




int main(void)
{
 d2a:	df 93       	push	r29
 d2c:	cf 93       	push	r28
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
	DDRA|=(1<<2);
 d32:	aa e3       	ldi	r26, 0x3A	; 58
 d34:	b0 e0       	ldi	r27, 0x00	; 0
 d36:	ea e3       	ldi	r30, 0x3A	; 58
 d38:	f0 e0       	ldi	r31, 0x00	; 0
 d3a:	80 81       	ld	r24, Z
 d3c:	84 60       	ori	r24, 0x04	; 4
 d3e:	8c 93       	st	X, r24
	PORTA|=(1<<2);
 d40:	ab e3       	ldi	r26, 0x3B	; 59
 d42:	b0 e0       	ldi	r27, 0x00	; 0
 d44:	eb e3       	ldi	r30, 0x3B	; 59
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	80 81       	ld	r24, Z
 d4a:	84 60       	ori	r24, 0x04	; 4
 d4c:	8c 93       	st	X, r24
	SEV_SEG_init(0);
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	0e 94 af 06 	call	0xd5e	; 0xd5e <SEV_SEG_init>
	while(1)
	{

		SEV_SEG_init(KeyPad_getPressedKey());
 d54:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <KeyPad_getPressedKey>
 d58:	0e 94 af 06 	call	0xd5e	; 0xd5e <SEV_SEG_init>
 d5c:	fb cf       	rjmp	.-10     	; 0xd54 <main+0x2a>

00000d5e <SEV_SEG_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void SEV_SEG_init(uint8 value)
{
 d5e:	df 93       	push	r29
 d60:	cf 93       	push	r28
 d62:	0f 92       	push	r0
 d64:	cd b7       	in	r28, 0x3d	; 61
 d66:	de b7       	in	r29, 0x3e	; 62
 d68:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_port_Dir('A',out);
 d6a:	81 e4       	ldi	r24, 0x41	; 65
 d6c:	61 e0       	ldi	r22, 0x01	; 1
 d6e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_set_port_Dir>
	DIO_setPINDir('C',6,out);
 d72:	83 e4       	ldi	r24, 0x43	; 67
 d74:	66 e0       	ldi	r22, 0x06	; 6
 d76:	41 e0       	ldi	r20, 0x01	; 1
 d78:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPINDir>
	DIO_write_PIN('C',6,0);
 d7c:	83 e4       	ldi	r24, 0x43	; 67
 d7e:	66 e0       	ldi	r22, 0x06	; 6
 d80:	40 e0       	ldi	r20, 0x00	; 0
 d82:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_write_PIN>
	DIO_write_port('A',value);
 d86:	81 e4       	ldi	r24, 0x41	; 65
 d88:	69 81       	ldd	r22, Y+1	; 0x01
 d8a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <DIO_write_port>

}
 d8e:	0f 90       	pop	r0
 d90:	cf 91       	pop	r28
 d92:	df 91       	pop	r29
 d94:	08 95       	ret

00000d96 <_exit>:
 d96:	f8 94       	cli

00000d98 <__stop_program>:
 d98:	ff cf       	rjmp	.-2      	; 0xd98 <__stop_program>
